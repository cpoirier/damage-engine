// Generated by CoffeeScript 1.7.1
(function() {
  var RouteNode, ServiceCall, bind, rxt,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  bind = rx.bind;

  rxt = rx.rxt;

  rxt.importTags();

  _.mixin(_.str.exports());

  window.Application = (function() {
    function Application(definer) {
      if (definer == null) {
        definer = null;
      }
      this.route = __bind(this.route, this);
      this.routing = new RouteNode("", null);
      this.variables = {};
      this.template = rx.cell(this.messageInitializing);
      this.parameters = [];
      this.page = null;
      this.sections = rx.array();
      if (typeof definer === "function") {
        definer(this);
      }
      rx.transaction((function(_this) {
        return function() {
          return _this.template.onSet.sub(function(_arg) {
            var contents, old, template, viewport;
            old = _arg[0], template = _arg[1];
            viewport = $("#app");
            viewport.empty();
            if (template) {
              viewport.append(_this.messageLoading());
              contents = template(_({
                app: _this
              }).defaults(_this.variables));
              viewport.empty();
              return viewport.append(contents);
            } else {
              return viewport.append(_this.messageNotFound());
            }
          });
        };
      })(this));
    }

    Application.prototype.delegate = function(url, handlerName, sections) {
      var path;
      if (sections == null) {
        sections = [];
      }
      if (!_.isArray(sections)) {
        sections = [sections];
      }
      path = url.split('/').slice(1);
      return this.routing.addRoute(path, handlerName, sections);
    };

    Application.prototype.set = function(name, value) {
      if (this.variables[name] != null) {
        return this.variables[name].set(value);
      } else {
        return this.variables[name] = value instanceof rx.ObsCell ? value : rx.cell(value);
      }
    };

    Application.prototype.get = function(name) {
      var _ref;
      return (_ref = this.variables[name]) != null ? _ref.get() : void 0;
    };

    Application.prototype.load = function() {
      var pieces, url;
      pieces = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      url = pieces.join("/");
      if (url.indexOf('#') === 0) {
        url = url.slice(1);
      }
      if (url.indexOf('/') !== 0) {
        url = "/" + url;
      }
      window.location.hash = url;
      return div("");
    };

    Application.prototype.inSection = function(section) {
      return this.sections.all().indexOf(section) > -1;
    };

    Application.prototype.start = function() {
      $(window).bind("hashchange", this.route);
      return $(window).trigger("hashchange");
    };

    Application.prototype.route = function(event) {
      return rx.transaction((function(_this) {
        return function() {
          var common, highest, i, j, name, old, parameters, path, pieces, sections, solution, symbol, target, unwind, value, _base, _base1, _i, _j, _len, _ref, _ref1, _ref2;
          if (window.location.hash === "" || window.location.hash === "#") {
            window.location.hash = "/";
          }
          path = ("" + window.location.hash).split('/').slice(1);
          solution = [];
          parameters = {};
          sections = [];
          if (target = _this.routing.route(path, parameters, solution, sections)) {
            _this.sections.replace(sections);
            if (_.isString(target)) {
              pieces = target.split("/").map(function(step) {
                if (step.substr(0, 1) === ":" && (parameters[step.substr(1)] != null)) {
                  return parameters[step.substr(1)];
                } else {
                  return step;
                }
              });
              return window.location.hash = pieces.join("/");
            } else {
              unwind = (_ref = (_ref1 = _this.page) != null ? _ref1.solution : void 0) != null ? _ref : [];
              if (_this.page && _this.template.get() === target) {
                old = _this.page.solution;
                common = [];
                unwind = [];
                highest = _.min(old.length, solution.length);
                for (i = _i = highest; highest <= 1 ? _i <= 1 : _i >= 1; i = highest <= 1 ? ++_i : --_i) {
                  j = i - 1;
                  if (_.isEqual(old.slice(0, +j + 1 || 9e9), solution.slice(0, +j + 1 || 9e9))) {
                    common = solution.slice(0, +j + 1 || 9e9);
                    unwind = old.slice(i);
                    break;
                  }
                }
              }
              _ref2 = unwind.reverse();
              for (_j = 0, _len = _ref2.length; _j < _len; _j++) {
                symbol = _ref2[_j];
                if (symbol.slice(0, 1) === ':') {
                  name = symbol.slice(1);
                  if (typeof (_base = _this.variables[name]).disconnect === "function") {
                    _base.disconnect();
                  }
                  delete _this.variables[name];
                }
              }
              for (name in parameters) {
                if (!__hasProp.call(parameters, name)) continue;
                value = parameters[name];
                if ((_base1 = _this.variables)[name] == null) {
                  _base1[name] = rx.cell();
                }
                _this.variables[name].set(value);
              }
              _this.page = {
                url: "/" + path.join("/"),
                address: "/" + solution.join("/"),
                solution: solution,
                template: target,
                parameters: parameters
              };
              return _this.template.set(target);
            }
          } else {
            return _this.template.set(_this.messageNotFound);
          }
        };
      })(this));
    };

    Application.prototype.messageNotFound = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return p({
        "class": 'text-danger'
      }, [i("No applicable template found. Please contact support.")]);
    };

    Application.prototype.messageInitializing = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return p({
        "class": 'text-info pulsate'
      }, [i("Initializing...")]);
    };

    Application.prototype.messageLoading = function(opts) {
      if (opts == null) {
        opts = {};
      }
      return p({
        "class": 'text-info pulsate'
      }, [i("Loading...")]);
    };

    return Application;

  })();

  window.Service = (function() {
    function Service(method, url, parameters) {
      this.method = method;
      this.url = url;
      this.parameters = parameters;
    }

    Service.prototype.specialize = function(parameters) {
      if (parameters == null) {
        parameters = {};
      }
      return new Service(this.method, this.url, _(parameters).defaults(this.parameters));
    };

    Service.prototype.instantiate = function(parameters) {
      if (parameters == null) {
        parameters = {};
      }
      return new ServiceCall(this, _(parameters).defaults(this.parameters));
    };

    Service.prototype.load = function(parameters) {
      if (parameters == null) {
        parameters = {};
      }
      return this.instantiate(parameters).load();
    };

    Service.prototype.call = function(parameters) {
      if (parameters == null) {
        parameters = {};
      }
      return this.load(parameters);
    };

    return Service;

  })();

  ServiceCall = (function() {
    function ServiceCall(service, parameters) {
      var key, value;
      this.service = service;
      if (parameters == null) {
        parameters = {};
      }
      this.parameters = {};
      this.promise = null;
      this.status = rx.cell("loading");
      this.code = rx.cell(0);
      this.response = rx.cell(null);
      this.content = rx.cell(null);
      for (key in parameters) {
        if (!__hasProp.call(parameters, key)) continue;
        value = parameters[key];
        this.parameters[key] = value.get != null ? value.get() : value;
      }
      this.doneHandler = (function(_this) {
        return function(data, code) {
          var response, _ref;
          response = (_ref = data.response) != null ? _ref : {};
          return rx.transaction(function() {
            var _ref1;
            _this.code.set(code);
            _this.response.set(response);
            if ((response.success != null) && response.success) {
              _this.status.set("success");
              return _this.content.set((_ref1 = response.content) != null ? _ref1 : {});
            } else if (response.message != null) {
              _this.status.set("failed");
              return _this.content.set(response.message);
            } else {
              _this.status.set("failed");
              return _this.content.set(code);
            }
          });
        };
      })(this);
      this.failHandler = (function(_this) {
        return function(xhr, code) {
          return rx.transaction(function() {
            _this.code.set(code);
            _this.response.set(null);
            _this.status.set("failed");
            return _this.content.set(code);
          });
        };
      })(this);
    }

    ServiceCall.prototype.call = function(parameters) {
      if (parameters == null) {
        parameters = {};
      }
      return this.load(parameters);
    };

    ServiceCall.prototype.load = function(parameters) {
      var key, value;
      if (parameters == null) {
        parameters = {};
      }
      for (key in parameters) {
        if (!__hasProp.call(parameters, key)) continue;
        value = parameters[key];
        this.parameters[key] = value.get != null ? value.get() : value;
      }
      this.promise = $.ajax(this.service.url, {
        type: this.service.method.toUpperCase(),
        cache: false,
        headers: {
          "cache-control": "no-cache"
        },
        context: this,
        data: this.parameters,
        dateType: "json"
      }).done(this.doneHandler).fail(this.failHandler);
      return this;
    };

    ServiceCall.prototype.reset = function() {
      this.code.set(0);
      this.status.set("loading");
      this.response.set(null);
      return this.content.set(null);
    };

    ServiceCall.prototype.done = function(handler) {
      this.response.onSet.sub((function(_this) {
        return function(_arg) {
          var newValue, oldValue;
          oldValue = _arg[0], newValue = _arg[1];
          if (newValue) {
            return handler(newValue, _this);
          }
        };
      })(this));
      return this;
    };

    ServiceCall.prototype.success = function(handler) {
      this.status.onSet.sub((function(_this) {
        return function(_arg) {
          var newValue, oldValue;
          oldValue = _arg[0], newValue = _arg[1];
          if (newValue === "success") {
            return handler(_this.content.get(), _this.response.get(), _this);
          }
        };
      })(this));
      return this;
    };

    ServiceCall.prototype.fail = function(handler) {
      this.status.onSet.sub((function(_this) {
        return function(_arg) {
          var newValue, oldValue;
          oldValue = _arg[0], newValue = _arg[1];
          if (newValue === "failed") {
            return handler(_this.content.get(), _this.response.get(), _this);
          }
        };
      })(this));
      return this;
    };

    return ServiceCall;

  })();

  RouteNode = (function() {
    function RouteNode(name, markers) {
      if (markers == null) {
        markers = [];
      }
      this.name = name;
      this.target = null;
      this.names = {};
      this.parameter = null;
      this.markers = markers;
    }

    RouteNode.prototype.setTarget = function(handler) {
      return this.target = handler;
    };

    RouteNode.prototype.addRoute = function(path, handler, markers) {
      var name, rest, route;
      name = path[0], rest = 2 <= path.length ? __slice.call(path, 1) : [];
      route = null;
      if (name.substr(0, 1) === ":") {
        if (this.parameter) {
          if (this.parameter.name !== name.substr(1)) {
            throw "can't route two different variable parameters";
          } else {
            route = this.parameter;
          }
        } else {
          this.parameter = route = new RouteNode(name.substr(1), markers);
        }
      } else if (this.names[name]) {
        route = this.names[name];
      } else {
        this.names[name] = route = new RouteNode(name, markers);
      }
      if (rest.length === 0) {
        return route.setTarget(handler);
      } else {
        return route.addRoute(rest, handler, markers);
      }
    };

    RouteNode.prototype.route = function(path, parameters, symbols, markers) {
      var index, marker, name, rest, _ref;
      if (parameters == null) {
        parameters = {};
      }
      if (symbols == null) {
        symbols = [];
      }
      if (markers == null) {
        markers = [];
      }
      if (path.length === 0) {
        _ref = this.markers;
        for (index in _ref) {
          marker = _ref[index];
          markers.push(marker);
        }
        return this.target;
      } else {
        name = path[0], rest = 2 <= path.length ? __slice.call(path, 1) : [];
        if (this.names[name]) {
          symbols.push(name);
          return this.names[name].route(rest, parameters, symbols, markers);
        } else if (this.parameter) {
          parameters[this.parameter.name] = decodeURIComponent(name);
          symbols.push(":" + this.parameter.name);
          return this.parameter.route(rest, parameters, symbols, markers);
        } else {
          return null;
        }
      }
    };

    return RouteNode;

  })();

}).call(this);
